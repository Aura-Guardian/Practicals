State 39 conflicts: 1 shift/reduce
State 40 conflicts: 1 shift/reduce
State 41 conflicts: 1 shift/reduce
State 42 conflicts: 1 shift/reduce
State 43 conflicts: 1 shift/reduce
State 44 conflicts: 1 shift/reduce
State 45 conflicts: 1 shift/reduce
State 46 conflicts: 1 shift/reduce
State 47 conflicts: 9 shift/reduce
State 48 conflicts: 2 shift/reduce
State 49 conflicts: 2 shift/reduce
State 50 conflicts: 2 shift/reduce
State 51 conflicts: 2 shift/reduce
State 71 conflicts: 1 reduce/reduce


Grammar

    0 $accept: PROG $end

    1 PROG: DECLS FUNC_MAIN

    2 DECLS: DECLS DECL
    3      | /* empty */

    4 DECL: DT ID ';'
    5     | DT ID '=' E ';'

    6 FUNC_MAIN: DT ID '(' ')' BLK

    7 BLK: '{' SS '}'

    8 SS: SS S
    9   | S

   10 S: E ';'
   11  | IFST ELSEST
   12  | ELSEST
   13  | FORST
   14  | WHILEST
   15  | RETURNST
   16  | BLK
   17  | DECL

   18 IFST: IF '(' E ')' S

   19 ELSEST: ELSE S

   20 FORST: FOR '(' FOR_INIT ';' E ';' E ')' S

   21 FOR_INIT: DECL
   22         | E
   23         | /* empty */

   24 WHILEST: WHILE '(' E ')' S

   25 RETURNST: RETURN E ';'

   26 E: E '=' E
   27  | E EQ E
   28  | E NEQ E
   29  | E '<' E
   30  | E '>' E
   31  | E LEQ E
   32  | E GEQ E
   33  | E AND E
   34  | E OR E
   35  | F
   36  | /* empty */

   37 F: F '+' F
   38  | F '-' F
   39  | F '*' F
   40  | F '/' F
   41  | F INC
   42  | F DEC
   43  | G

   44 G: '(' E ')'
   45  | ID
   46  | NUM
   47  | FNUM


Terminals, with rules where they appear

$end (0) 0
'(' (40) 6 18 20 24 44
')' (41) 6 18 20 24 44
'*' (42) 39
'+' (43) 37
'-' (45) 38
'/' (47) 40
';' (59) 4 5 10 20 25
'<' (60) 29
'=' (61) 5 26
'>' (62) 30
'{' (123) 7
'}' (125) 7
error (256)
DT (258) 4 5 6
ID (259) 4 5 6 45
IF (260) 18
ELSE (261) 19
FOR (262) 20
WHILE (263) 24
RETURN (264) 25
NUM (265) 46
FNUM (266) 47
EQ (267) 27
NEQ (268) 28
LEQ (269) 31
GEQ (270) 32
AND (271) 33
OR (272) 34
INC (273) 41
DEC (274) 42


Nonterminals, with rules where they appear

$accept (32)
    on left: 0
PROG (33)
    on left: 1, on right: 0
DECLS (34)
    on left: 2 3, on right: 1 2
DECL (35)
    on left: 4 5, on right: 2 17 21
FUNC_MAIN (36)
    on left: 6, on right: 1
BLK (37)
    on left: 7, on right: 6 16
SS (38)
    on left: 8 9, on right: 7 8
S (39)
    on left: 10 11 12 13 14 15 16 17, on right: 8 9 18 19 20 24
IFST (40)
    on left: 18, on right: 11
ELSEST (41)
    on left: 19, on right: 11 12
FORST (42)
    on left: 20, on right: 13
FOR_INIT (43)
    on left: 21 22 23, on right: 20
WHILEST (44)
    on left: 24, on right: 14
RETURNST (45)
    on left: 25, on right: 15
E (46)
    on left: 26 27 28 29 30 31 32 33 34 35 36, on right: 5 10 18 20
    22 24 25 26 27 28 29 30 31 32 33 34 44
F (47)
    on left: 37 38 39 40 41 42 43, on right: 35 37 38 39 40 41 42
G (48)
    on left: 44 45 46 47, on right: 43


state 0

    0 $accept: . PROG $end

    $default  reduce using rule 3 (DECLS)

    PROG   go to state 1
    DECLS  go to state 2


state 1

    0 $accept: PROG . $end

    $end  shift, and go to state 3


state 2

    1 PROG: DECLS . FUNC_MAIN
    2 DECLS: DECLS . DECL

    DT  shift, and go to state 4

    DECL       go to state 5
    FUNC_MAIN  go to state 6


state 3

    0 $accept: PROG $end .

    $default  accept


state 4

    4 DECL: DT . ID ';'
    5     | DT . ID '=' E ';'
    6 FUNC_MAIN: DT . ID '(' ')' BLK

    ID  shift, and go to state 7


state 5

    2 DECLS: DECLS DECL .

    $default  reduce using rule 2 (DECLS)


state 6

    1 PROG: DECLS FUNC_MAIN .

    $default  reduce using rule 1 (PROG)


state 7

    4 DECL: DT ID . ';'
    5     | DT ID . '=' E ';'
    6 FUNC_MAIN: DT ID . '(' ')' BLK

    ';'  shift, and go to state 8
    '='  shift, and go to state 9
    '('  shift, and go to state 10


state 8

    4 DECL: DT ID ';' .

    $default  reduce using rule 4 (DECL)


state 9

    5 DECL: DT ID '=' . E ';'

    ID    shift, and go to state 11
    NUM   shift, and go to state 12
    FNUM  shift, and go to state 13
    '('   shift, and go to state 14

    $default  reduce using rule 36 (E)

    E  go to state 15
    F  go to state 16
    G  go to state 17


state 10

    6 FUNC_MAIN: DT ID '(' . ')' BLK

    ')'  shift, and go to state 18


state 11

   45 G: ID .

    $default  reduce using rule 45 (G)


state 12

   46 G: NUM .

    $default  reduce using rule 46 (G)


state 13

   47 G: FNUM .

    $default  reduce using rule 47 (G)


state 14

   44 G: '(' . E ')'

    ID    shift, and go to state 11
    NUM   shift, and go to state 12
    FNUM  shift, and go to state 13
    '('   shift, and go to state 14

    $default  reduce using rule 36 (E)

    E  go to state 19
    F  go to state 16
    G  go to state 17


state 15

    5 DECL: DT ID '=' E . ';'
   26 E: E . '=' E
   27  | E . EQ E
   28  | E . NEQ E
   29  | E . '<' E
   30  | E . '>' E
   31  | E . LEQ E
   32  | E . GEQ E
   33  | E . AND E
   34  | E . OR E

    EQ   shift, and go to state 20
    NEQ  shift, and go to state 21
    LEQ  shift, and go to state 22
    GEQ  shift, and go to state 23
    AND  shift, and go to state 24
    OR   shift, and go to state 25
    '<'  shift, and go to state 26
    '>'  shift, and go to state 27
    ';'  shift, and go to state 28
    '='  shift, and go to state 29


state 16

   35 E: F .
   37 F: F . '+' F
   38  | F . '-' F
   39  | F . '*' F
   40  | F . '/' F
   41  | F . INC
   42  | F . DEC

    INC  shift, and go to state 30
    DEC  shift, and go to state 31
    '+'  shift, and go to state 32
    '-'  shift, and go to state 33
    '*'  shift, and go to state 34
    '/'  shift, and go to state 35

    $default  reduce using rule 35 (E)


state 17

   43 F: G .

    $default  reduce using rule 43 (F)


state 18

    6 FUNC_MAIN: DT ID '(' ')' . BLK

    '{'  shift, and go to state 36

    BLK  go to state 37


state 19

   26 E: E . '=' E
   27  | E . EQ E
   28  | E . NEQ E
   29  | E . '<' E
   30  | E . '>' E
   31  | E . LEQ E
   32  | E . GEQ E
   33  | E . AND E
   34  | E . OR E
   44 G: '(' E . ')'

    EQ   shift, and go to state 20
    NEQ  shift, and go to state 21
    LEQ  shift, and go to state 22
    GEQ  shift, and go to state 23
    AND  shift, and go to state 24
    OR   shift, and go to state 25
    '<'  shift, and go to state 26
    '>'  shift, and go to state 27
    '='  shift, and go to state 29
    ')'  shift, and go to state 38


state 20

   27 E: E EQ . E

    ID    shift, and go to state 11
    NUM   shift, and go to state 12
    FNUM  shift, and go to state 13
    '('   shift, and go to state 14

    $default  reduce using rule 36 (E)

    E  go to state 39
    F  go to state 16
    G  go to state 17


state 21

   28 E: E NEQ . E

    ID    shift, and go to state 11
    NUM   shift, and go to state 12
    FNUM  shift, and go to state 13
    '('   shift, and go to state 14

    $default  reduce using rule 36 (E)

    E  go to state 40
    F  go to state 16
    G  go to state 17


state 22

   31 E: E LEQ . E

    ID    shift, and go to state 11
    NUM   shift, and go to state 12
    FNUM  shift, and go to state 13
    '('   shift, and go to state 14

    $default  reduce using rule 36 (E)

    E  go to state 41
    F  go to state 16
    G  go to state 17


state 23

   32 E: E GEQ . E

    ID    shift, and go to state 11
    NUM   shift, and go to state 12
    FNUM  shift, and go to state 13
    '('   shift, and go to state 14

    $default  reduce using rule 36 (E)

    E  go to state 42
    F  go to state 16
    G  go to state 17


state 24

   33 E: E AND . E

    ID    shift, and go to state 11
    NUM   shift, and go to state 12
    FNUM  shift, and go to state 13
    '('   shift, and go to state 14

    $default  reduce using rule 36 (E)

    E  go to state 43
    F  go to state 16
    G  go to state 17


state 25

   34 E: E OR . E

    ID    shift, and go to state 11
    NUM   shift, and go to state 12
    FNUM  shift, and go to state 13
    '('   shift, and go to state 14

    $default  reduce using rule 36 (E)

    E  go to state 44
    F  go to state 16
    G  go to state 17


state 26

   29 E: E '<' . E

    ID    shift, and go to state 11
    NUM   shift, and go to state 12
    FNUM  shift, and go to state 13
    '('   shift, and go to state 14

    $default  reduce using rule 36 (E)

    E  go to state 45
    F  go to state 16
    G  go to state 17


state 27

   30 E: E '>' . E

    ID    shift, and go to state 11
    NUM   shift, and go to state 12
    FNUM  shift, and go to state 13
    '('   shift, and go to state 14

    $default  reduce using rule 36 (E)

    E  go to state 46
    F  go to state 16
    G  go to state 17


state 28

    5 DECL: DT ID '=' E ';' .

    $default  reduce using rule 5 (DECL)


state 29

   26 E: E '=' . E

    ID    shift, and go to state 11
    NUM   shift, and go to state 12
    FNUM  shift, and go to state 13
    '('   shift, and go to state 14

    $default  reduce using rule 36 (E)

    E  go to state 47
    F  go to state 16
    G  go to state 17


state 30

   41 F: F INC .

    $default  reduce using rule 41 (F)


state 31

   42 F: F DEC .

    $default  reduce using rule 42 (F)


state 32

   37 F: F '+' . F

    ID    shift, and go to state 11
    NUM   shift, and go to state 12
    FNUM  shift, and go to state 13
    '('   shift, and go to state 14

    F  go to state 48
    G  go to state 17


state 33

   38 F: F '-' . F

    ID    shift, and go to state 11
    NUM   shift, and go to state 12
    FNUM  shift, and go to state 13
    '('   shift, and go to state 14

    F  go to state 49
    G  go to state 17


state 34

   39 F: F '*' . F

    ID    shift, and go to state 11
    NUM   shift, and go to state 12
    FNUM  shift, and go to state 13
    '('   shift, and go to state 14

    F  go to state 50
    G  go to state 17


state 35

   40 F: F '/' . F

    ID    shift, and go to state 11
    NUM   shift, and go to state 12
    FNUM  shift, and go to state 13
    '('   shift, and go to state 14

    F  go to state 51
    G  go to state 17


state 36

    7 BLK: '{' . SS '}'

    DT      shift, and go to state 52
    ID      shift, and go to state 11
    IF      shift, and go to state 53
    ELSE    shift, and go to state 54
    FOR     shift, and go to state 55
    WHILE   shift, and go to state 56
    RETURN  shift, and go to state 57
    NUM     shift, and go to state 12
    FNUM    shift, and go to state 13
    '('     shift, and go to state 14
    '{'     shift, and go to state 36

    $default  reduce using rule 36 (E)

    DECL      go to state 58
    BLK       go to state 59
    SS        go to state 60
    S         go to state 61
    IFST      go to state 62
    ELSEST    go to state 63
    FORST     go to state 64
    WHILEST   go to state 65
    RETURNST  go to state 66
    E         go to state 67
    F         go to state 16
    G         go to state 17


state 37

    6 FUNC_MAIN: DT ID '(' ')' BLK .

    $default  reduce using rule 6 (FUNC_MAIN)


state 38

   44 G: '(' E ')' .

    $default  reduce using rule 44 (G)


state 39

   26 E: E . '=' E
   27  | E . EQ E
   27  | E EQ E .
   28  | E . NEQ E
   29  | E . '<' E
   30  | E . '>' E
   31  | E . LEQ E
   32  | E . GEQ E
   33  | E . AND E
   34  | E . OR E

    LEQ  shift, and go to state 22
    GEQ  shift, and go to state 23
    '<'  shift, and go to state 26
    '>'  shift, and go to state 27
    '='  shift, and go to state 29

    '='       [reduce using rule 27 (E)]
    $default  reduce using rule 27 (E)


state 40

   26 E: E . '=' E
   27  | E . EQ E
   28  | E . NEQ E
   28  | E NEQ E .
   29  | E . '<' E
   30  | E . '>' E
   31  | E . LEQ E
   32  | E . GEQ E
   33  | E . AND E
   34  | E . OR E

    LEQ  shift, and go to state 22
    GEQ  shift, and go to state 23
    '<'  shift, and go to state 26
    '>'  shift, and go to state 27
    '='  shift, and go to state 29

    '='       [reduce using rule 28 (E)]
    $default  reduce using rule 28 (E)


state 41

   26 E: E . '=' E
   27  | E . EQ E
   28  | E . NEQ E
   29  | E . '<' E
   30  | E . '>' E
   31  | E . LEQ E
   31  | E LEQ E .
   32  | E . GEQ E
   33  | E . AND E
   34  | E . OR E

    '='  shift, and go to state 29

    '='       [reduce using rule 31 (E)]
    $default  reduce using rule 31 (E)


state 42

   26 E: E . '=' E
   27  | E . EQ E
   28  | E . NEQ E
   29  | E . '<' E
   30  | E . '>' E
   31  | E . LEQ E
   32  | E . GEQ E
   32  | E GEQ E .
   33  | E . AND E
   34  | E . OR E

    '='  shift, and go to state 29

    '='       [reduce using rule 32 (E)]
    $default  reduce using rule 32 (E)


state 43

   26 E: E . '=' E
   27  | E . EQ E
   28  | E . NEQ E
   29  | E . '<' E
   30  | E . '>' E
   31  | E . LEQ E
   32  | E . GEQ E
   33  | E . AND E
   33  | E AND E .
   34  | E . OR E

    EQ   shift, and go to state 20
    NEQ  shift, and go to state 21
    LEQ  shift, and go to state 22
    GEQ  shift, and go to state 23
    '<'  shift, and go to state 26
    '>'  shift, and go to state 27
    '='  shift, and go to state 29

    '='       [reduce using rule 33 (E)]
    $default  reduce using rule 33 (E)


state 44

   26 E: E . '=' E
   27  | E . EQ E
   28  | E . NEQ E
   29  | E . '<' E
   30  | E . '>' E
   31  | E . LEQ E
   32  | E . GEQ E
   33  | E . AND E
   34  | E . OR E
   34  | E OR E .

    EQ   shift, and go to state 20
    NEQ  shift, and go to state 21
    LEQ  shift, and go to state 22
    GEQ  shift, and go to state 23
    AND  shift, and go to state 24
    '<'  shift, and go to state 26
    '>'  shift, and go to state 27
    '='  shift, and go to state 29

    '='       [reduce using rule 34 (E)]
    $default  reduce using rule 34 (E)


state 45

   26 E: E . '=' E
   27  | E . EQ E
   28  | E . NEQ E
   29  | E . '<' E
   29  | E '<' E .
   30  | E . '>' E
   31  | E . LEQ E
   32  | E . GEQ E
   33  | E . AND E
   34  | E . OR E

    '='  shift, and go to state 29

    '='       [reduce using rule 29 (E)]
    $default  reduce using rule 29 (E)


state 46

   26 E: E . '=' E
   27  | E . EQ E
   28  | E . NEQ E
   29  | E . '<' E
   30  | E . '>' E
   30  | E '>' E .
   31  | E . LEQ E
   32  | E . GEQ E
   33  | E . AND E
   34  | E . OR E

    '='  shift, and go to state 29

    '='       [reduce using rule 30 (E)]
    $default  reduce using rule 30 (E)


state 47

   26 E: E . '=' E
   26  | E '=' E .
   27  | E . EQ E
   28  | E . NEQ E
   29  | E . '<' E
   30  | E . '>' E
   31  | E . LEQ E
   32  | E . GEQ E
   33  | E . AND E
   34  | E . OR E

    EQ   shift, and go to state 20
    NEQ  shift, and go to state 21
    LEQ  shift, and go to state 22
    GEQ  shift, and go to state 23
    AND  shift, and go to state 24
    OR   shift, and go to state 25
    '<'  shift, and go to state 26
    '>'  shift, and go to state 27
    '='  shift, and go to state 29

    EQ        [reduce using rule 26 (E)]
    NEQ       [reduce using rule 26 (E)]
    LEQ       [reduce using rule 26 (E)]
    GEQ       [reduce using rule 26 (E)]
    AND       [reduce using rule 26 (E)]
    OR        [reduce using rule 26 (E)]
    '<'       [reduce using rule 26 (E)]
    '>'       [reduce using rule 26 (E)]
    '='       [reduce using rule 26 (E)]
    $default  reduce using rule 26 (E)


state 48

   37 F: F . '+' F
   37  | F '+' F .
   38  | F . '-' F
   39  | F . '*' F
   40  | F . '/' F
   41  | F . INC
   42  | F . DEC

    INC  shift, and go to state 30
    DEC  shift, and go to state 31
    '*'  shift, and go to state 34
    '/'  shift, and go to state 35

    INC       [reduce using rule 37 (F)]
    DEC       [reduce using rule 37 (F)]
    $default  reduce using rule 37 (F)


state 49

   37 F: F . '+' F
   38  | F . '-' F
   38  | F '-' F .
   39  | F . '*' F
   40  | F . '/' F
   41  | F . INC
   42  | F . DEC

    INC  shift, and go to state 30
    DEC  shift, and go to state 31
    '*'  shift, and go to state 34
    '/'  shift, and go to state 35

    INC       [reduce using rule 38 (F)]
    DEC       [reduce using rule 38 (F)]
    $default  reduce using rule 38 (F)


state 50

   37 F: F . '+' F
   38  | F . '-' F
   39  | F . '*' F
   39  | F '*' F .
   40  | F . '/' F
   41  | F . INC
   42  | F . DEC

    INC  shift, and go to state 30
    DEC  shift, and go to state 31

    INC       [reduce using rule 39 (F)]
    DEC       [reduce using rule 39 (F)]
    $default  reduce using rule 39 (F)


state 51

   37 F: F . '+' F
   38  | F . '-' F
   39  | F . '*' F
   40  | F . '/' F
   40  | F '/' F .
   41  | F . INC
   42  | F . DEC

    INC  shift, and go to state 30
    DEC  shift, and go to state 31

    INC       [reduce using rule 40 (F)]
    DEC       [reduce using rule 40 (F)]
    $default  reduce using rule 40 (F)


state 52

    4 DECL: DT . ID ';'
    5     | DT . ID '=' E ';'

    ID  shift, and go to state 68


state 53

   18 IFST: IF . '(' E ')' S

    '('  shift, and go to state 69


state 54

   19 ELSEST: ELSE . S

    DT      shift, and go to state 52
    ID      shift, and go to state 11
    IF      shift, and go to state 53
    ELSE    shift, and go to state 54
    FOR     shift, and go to state 55
    WHILE   shift, and go to state 56
    RETURN  shift, and go to state 57
    NUM     shift, and go to state 12
    FNUM    shift, and go to state 13
    '('     shift, and go to state 14
    '{'     shift, and go to state 36

    $default  reduce using rule 36 (E)

    DECL      go to state 58
    BLK       go to state 59
    S         go to state 70
    IFST      go to state 62
    ELSEST    go to state 63
    FORST     go to state 64
    WHILEST   go to state 65
    RETURNST  go to state 66
    E         go to state 67
    F         go to state 16
    G         go to state 17


state 55

   20 FORST: FOR . '(' FOR_INIT ';' E ';' E ')' S

    '('  shift, and go to state 71


state 56

   24 WHILEST: WHILE . '(' E ')' S

    '('  shift, and go to state 72


state 57

   25 RETURNST: RETURN . E ';'

    ID    shift, and go to state 11
    NUM   shift, and go to state 12
    FNUM  shift, and go to state 13
    '('   shift, and go to state 14

    $default  reduce using rule 36 (E)

    E  go to state 73
    F  go to state 16
    G  go to state 17


state 58

   17 S: DECL .

    $default  reduce using rule 17 (S)


state 59

   16 S: BLK .

    $default  reduce using rule 16 (S)


state 60

    7 BLK: '{' SS . '}'
    8 SS: SS . S

    DT      shift, and go to state 52
    ID      shift, and go to state 11
    IF      shift, and go to state 53
    ELSE    shift, and go to state 54
    FOR     shift, and go to state 55
    WHILE   shift, and go to state 56
    RETURN  shift, and go to state 57
    NUM     shift, and go to state 12
    FNUM    shift, and go to state 13
    '('     shift, and go to state 14
    '{'     shift, and go to state 36
    '}'     shift, and go to state 74

    $default  reduce using rule 36 (E)

    DECL      go to state 58
    BLK       go to state 59
    S         go to state 75
    IFST      go to state 62
    ELSEST    go to state 63
    FORST     go to state 64
    WHILEST   go to state 65
    RETURNST  go to state 66
    E         go to state 67
    F         go to state 16
    G         go to state 17


state 61

    9 SS: S .

    $default  reduce using rule 9 (SS)


state 62

   11 S: IFST . ELSEST

    ELSE  shift, and go to state 54

    ELSEST  go to state 76


state 63

   12 S: ELSEST .

    $default  reduce using rule 12 (S)


state 64

   13 S: FORST .

    $default  reduce using rule 13 (S)


state 65

   14 S: WHILEST .

    $default  reduce using rule 14 (S)


state 66

   15 S: RETURNST .

    $default  reduce using rule 15 (S)


state 67

   10 S: E . ';'
   26 E: E . '=' E
   27  | E . EQ E
   28  | E . NEQ E
   29  | E . '<' E
   30  | E . '>' E
   31  | E . LEQ E
   32  | E . GEQ E
   33  | E . AND E
   34  | E . OR E

    EQ   shift, and go to state 20
    NEQ  shift, and go to state 21
    LEQ  shift, and go to state 22
    GEQ  shift, and go to state 23
    AND  shift, and go to state 24
    OR   shift, and go to state 25
    '<'  shift, and go to state 26
    '>'  shift, and go to state 27
    ';'  shift, and go to state 77
    '='  shift, and go to state 29


state 68

    4 DECL: DT ID . ';'
    5     | DT ID . '=' E ';'

    ';'  shift, and go to state 8
    '='  shift, and go to state 9


state 69

   18 IFST: IF '(' . E ')' S

    ID    shift, and go to state 11
    NUM   shift, and go to state 12
    FNUM  shift, and go to state 13
    '('   shift, and go to state 14

    $default  reduce using rule 36 (E)

    E  go to state 78
    F  go to state 16
    G  go to state 17


state 70

   19 ELSEST: ELSE S .

    $default  reduce using rule 19 (ELSEST)


state 71

   20 FORST: FOR '(' . FOR_INIT ';' E ';' E ')' S

    DT    shift, and go to state 52
    ID    shift, and go to state 11
    NUM   shift, and go to state 12
    FNUM  shift, and go to state 13
    '('   shift, and go to state 14

    ';'       reduce using rule 23 (FOR_INIT)
    ';'       [reduce using rule 36 (E)]
    $default  reduce using rule 36 (E)

    DECL      go to state 79
    FOR_INIT  go to state 80
    E         go to state 81
    F         go to state 16
    G         go to state 17


state 72

   24 WHILEST: WHILE '(' . E ')' S

    ID    shift, and go to state 11
    NUM   shift, and go to state 12
    FNUM  shift, and go to state 13
    '('   shift, and go to state 14

    $default  reduce using rule 36 (E)

    E  go to state 82
    F  go to state 16
    G  go to state 17


state 73

   25 RETURNST: RETURN E . ';'
   26 E: E . '=' E
   27  | E . EQ E
   28  | E . NEQ E
   29  | E . '<' E
   30  | E . '>' E
   31  | E . LEQ E
   32  | E . GEQ E
   33  | E . AND E
   34  | E . OR E

    EQ   shift, and go to state 20
    NEQ  shift, and go to state 21
    LEQ  shift, and go to state 22
    GEQ  shift, and go to state 23
    AND  shift, and go to state 24
    OR   shift, and go to state 25
    '<'  shift, and go to state 26
    '>'  shift, and go to state 27
    ';'  shift, and go to state 83
    '='  shift, and go to state 29


state 74

    7 BLK: '{' SS '}' .

    $default  reduce using rule 7 (BLK)


state 75

    8 SS: SS S .

    $default  reduce using rule 8 (SS)


state 76

   11 S: IFST ELSEST .

    $default  reduce using rule 11 (S)


state 77

   10 S: E ';' .

    $default  reduce using rule 10 (S)


state 78

   18 IFST: IF '(' E . ')' S
   26 E: E . '=' E
   27  | E . EQ E
   28  | E . NEQ E
   29  | E . '<' E
   30  | E . '>' E
   31  | E . LEQ E
   32  | E . GEQ E
   33  | E . AND E
   34  | E . OR E

    EQ   shift, and go to state 20
    NEQ  shift, and go to state 21
    LEQ  shift, and go to state 22
    GEQ  shift, and go to state 23
    AND  shift, and go to state 24
    OR   shift, and go to state 25
    '<'  shift, and go to state 26
    '>'  shift, and go to state 27
    '='  shift, and go to state 29
    ')'  shift, and go to state 84


state 79

   21 FOR_INIT: DECL .

    $default  reduce using rule 21 (FOR_INIT)


state 80

   20 FORST: FOR '(' FOR_INIT . ';' E ';' E ')' S

    ';'  shift, and go to state 85


state 81

   22 FOR_INIT: E .
   26 E: E . '=' E
   27  | E . EQ E
   28  | E . NEQ E
   29  | E . '<' E
   30  | E . '>' E
   31  | E . LEQ E
   32  | E . GEQ E
   33  | E . AND E
   34  | E . OR E

    EQ   shift, and go to state 20
    NEQ  shift, and go to state 21
    LEQ  shift, and go to state 22
    GEQ  shift, and go to state 23
    AND  shift, and go to state 24
    OR   shift, and go to state 25
    '<'  shift, and go to state 26
    '>'  shift, and go to state 27
    '='  shift, and go to state 29

    $default  reduce using rule 22 (FOR_INIT)


state 82

   24 WHILEST: WHILE '(' E . ')' S
   26 E: E . '=' E
   27  | E . EQ E
   28  | E . NEQ E
   29  | E . '<' E
   30  | E . '>' E
   31  | E . LEQ E
   32  | E . GEQ E
   33  | E . AND E
   34  | E . OR E

    EQ   shift, and go to state 20
    NEQ  shift, and go to state 21
    LEQ  shift, and go to state 22
    GEQ  shift, and go to state 23
    AND  shift, and go to state 24
    OR   shift, and go to state 25
    '<'  shift, and go to state 26
    '>'  shift, and go to state 27
    '='  shift, and go to state 29
    ')'  shift, and go to state 86


state 83

   25 RETURNST: RETURN E ';' .

    $default  reduce using rule 25 (RETURNST)


state 84

   18 IFST: IF '(' E ')' . S

    DT      shift, and go to state 52
    ID      shift, and go to state 11
    IF      shift, and go to state 53
    ELSE    shift, and go to state 54
    FOR     shift, and go to state 55
    WHILE   shift, and go to state 56
    RETURN  shift, and go to state 57
    NUM     shift, and go to state 12
    FNUM    shift, and go to state 13
    '('     shift, and go to state 14
    '{'     shift, and go to state 36

    $default  reduce using rule 36 (E)

    DECL      go to state 58
    BLK       go to state 59
    S         go to state 87
    IFST      go to state 62
    ELSEST    go to state 63
    FORST     go to state 64
    WHILEST   go to state 65
    RETURNST  go to state 66
    E         go to state 67
    F         go to state 16
    G         go to state 17


state 85

   20 FORST: FOR '(' FOR_INIT ';' . E ';' E ')' S

    ID    shift, and go to state 11
    NUM   shift, and go to state 12
    FNUM  shift, and go to state 13
    '('   shift, and go to state 14

    $default  reduce using rule 36 (E)

    E  go to state 88
    F  go to state 16
    G  go to state 17


state 86

   24 WHILEST: WHILE '(' E ')' . S

    DT      shift, and go to state 52
    ID      shift, and go to state 11
    IF      shift, and go to state 53
    ELSE    shift, and go to state 54
    FOR     shift, and go to state 55
    WHILE   shift, and go to state 56
    RETURN  shift, and go to state 57
    NUM     shift, and go to state 12
    FNUM    shift, and go to state 13
    '('     shift, and go to state 14
    '{'     shift, and go to state 36

    $default  reduce using rule 36 (E)

    DECL      go to state 58
    BLK       go to state 59
    S         go to state 89
    IFST      go to state 62
    ELSEST    go to state 63
    FORST     go to state 64
    WHILEST   go to state 65
    RETURNST  go to state 66
    E         go to state 67
    F         go to state 16
    G         go to state 17


state 87

   18 IFST: IF '(' E ')' S .

    $default  reduce using rule 18 (IFST)


state 88

   20 FORST: FOR '(' FOR_INIT ';' E . ';' E ')' S
   26 E: E . '=' E
   27  | E . EQ E
   28  | E . NEQ E
   29  | E . '<' E
   30  | E . '>' E
   31  | E . LEQ E
   32  | E . GEQ E
   33  | E . AND E
   34  | E . OR E

    EQ   shift, and go to state 20
    NEQ  shift, and go to state 21
    LEQ  shift, and go to state 22
    GEQ  shift, and go to state 23
    AND  shift, and go to state 24
    OR   shift, and go to state 25
    '<'  shift, and go to state 26
    '>'  shift, and go to state 27
    ';'  shift, and go to state 90
    '='  shift, and go to state 29


state 89

   24 WHILEST: WHILE '(' E ')' S .

    $default  reduce using rule 24 (WHILEST)


state 90

   20 FORST: FOR '(' FOR_INIT ';' E ';' . E ')' S

    ID    shift, and go to state 11
    NUM   shift, and go to state 12
    FNUM  shift, and go to state 13
    '('   shift, and go to state 14

    $default  reduce using rule 36 (E)

    E  go to state 91
    F  go to state 16
    G  go to state 17


state 91

   20 FORST: FOR '(' FOR_INIT ';' E ';' E . ')' S
   26 E: E . '=' E
   27  | E . EQ E
   28  | E . NEQ E
   29  | E . '<' E
   30  | E . '>' E
   31  | E . LEQ E
   32  | E . GEQ E
   33  | E . AND E
   34  | E . OR E

    EQ   shift, and go to state 20
    NEQ  shift, and go to state 21
    LEQ  shift, and go to state 22
    GEQ  shift, and go to state 23
    AND  shift, and go to state 24
    OR   shift, and go to state 25
    '<'  shift, and go to state 26
    '>'  shift, and go to state 27
    '='  shift, and go to state 29
    ')'  shift, and go to state 92


state 92

   20 FORST: FOR '(' FOR_INIT ';' E ';' E ')' . S

    DT      shift, and go to state 52
    ID      shift, and go to state 11
    IF      shift, and go to state 53
    ELSE    shift, and go to state 54
    FOR     shift, and go to state 55
    WHILE   shift, and go to state 56
    RETURN  shift, and go to state 57
    NUM     shift, and go to state 12
    FNUM    shift, and go to state 13
    '('     shift, and go to state 14
    '{'     shift, and go to state 36

    $default  reduce using rule 36 (E)

    DECL      go to state 58
    BLK       go to state 59
    S         go to state 93
    IFST      go to state 62
    ELSEST    go to state 63
    FORST     go to state 64
    WHILEST   go to state 65
    RETURNST  go to state 66
    E         go to state 67
    F         go to state 16
    G         go to state 17


state 93

   20 FORST: FOR '(' FOR_INIT ';' E ';' E ')' S .

    $default  reduce using rule 20 (FORST)
